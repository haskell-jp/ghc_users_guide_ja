.. This file is generated by utils/mkUserGuidePart

+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| Flag                                               | Description                                                                                          | Static/Dynamic                 | Reverse                                            |
+====================================================+======================================================================================================+================================+====================================================+
| :ghc-flag:`-W`                                     | enable normal warnings                                                                               | dynamic                        | :ghc-flag:`-w`                                     |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-w`                                     | disable all warnings                                                                                 | dynamic                        |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wall`                                  | enable almost all warnings (details in :ref:`options-sanity`)                                        | dynamic                        | :ghc-flag:`-w`                                     |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wcompat`                               | enable future compatibility warnings (details in :ref:`options-sanity`)                              | dynamic                        | :ghc-flag:`-Wno-compat`                            |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Werror`                                | make warnings fatal                                                                                  | dynamic                        | :ghc-flag:`-Wwarn`                                 |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wwarn`                                 | make warnings non-fatal                                                                              | dynamic                        | :ghc-flag:`-Werror`                                |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunrecognised-warning-flags`           | throw a warning when an unreconised ``-W...`` flag is encountered on the command line.               | dynamic                        | :ghc-flag:`-Wno-unrecognised-warning-flags`        |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-fshow-warning-groups`                  | show which group an emitted warning belongs to.                                                      | dynamic                        | :ghc-flag:`-fno-show-warning-groups`               |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-fdefer-type-errors`                    | Turn type errors into warnings, :ref:`deferring the error until runtime <defer-type-errors>`.        | dynamic                        | :ghc-flag:`-fno-defer-type-errors`                 |
|                                                    | Implies :ghc-flag:`-fdefer-typed-holes` and :ghc-flag:`-fdefer-out-of-scope-variables`. See          |                                |                                                    |
|                                                    | also :ghc-flag:`-Wdeferred-type-errors`                                                              |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-fdefer-typed-holes`                    | Convert :ref:`typed hole <typed-holes>` errors into warnings, :ref:`deferring the error until        | dynamic                        | :ghc-flag:`-fno-defer-typed-holes`                 |
|                                                    | runtime <defer-type-errors>`. Implied by :ghc-flag:`-fdefer-type-errors`. See also                   |                                |                                                    |
|                                                    | :ghc-flag:`-Wtyped-holes`.                                                                           |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-fdefer-out-of-scope-variables`         | Convert variable out of scope variables errors into warnings. Implied by                             | dynamic                        | :ghc-flag:`-fno-defer-out-of-scope-variables`      |
|                                                    | :ghc-flag:`-fdefer-type-errors`. See also :ghc-flag:`-Wdeferred-out-of-scope-variables`.             |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-fhelpful-errors`                       | Make suggestions for mis-spelled names.                                                              | dynamic                        | :ghc-flag:`-fno-helpful-errors`                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wdeprecated-flags`                     | warn about uses of commandline flags that are deprecated                                             | dynamic                        | :ghc-flag:`-Wno-deprecated-flags`                  |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wduplicate-constraints`                | warn when a constraint appears duplicated in a type signature                                        | dynamic                        | :ghc-flag:`-Wno-duplicate-constraints`             |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wduplicate-exports`                    | warn when an entity is exported multiple times                                                       | dynamic                        | :ghc-flag:`-Wno-duplicate-exports`                 |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Whi-shadowing`                         | warn when a ``.hi`` file in the current directory shadows a library                                  | dynamic                        | :ghc-flag:`-Wno-hi-shadowing`                      |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Widentities`                           | warn about uses of Prelude numeric conversions that are probably the identity (and hence could       | dynamic                        | :ghc-flag:`-Wno-identities`                        |
|                                                    | be omitted)                                                                                          |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wimplicit-prelude`                     | warn when the Prelude is implicitly imported                                                         | dynamic                        | :ghc-flag:`-Wno-implicit-prelude`                  |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wincomplete-patterns`                  | warn when a pattern match could fail                                                                 | dynamic                        | :ghc-flag:`-Wno-incomplete-patterns`               |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wincomplete-uni-patterns`              | warn when a pattern match in a lambda expression or pattern binding could fail                       | dynamic                        | :ghc-flag:`-Wno-incomplete-uni-patterns`           |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmax-pmcheck-iterations=<N>`           | the iteration limit for the pattern match checker                                                    | dynamic                        |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wincomplete-record-updates`            | warn when a record update could fail                                                                 | dynamic                        | :ghc-flag:`-Wno-incomplete-record-updates`         |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-fields`                       | warn when fields of a record are uninitialised                                                       | dynamic                        | :ghc-flag:`-Wno-missing-fields`                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-import-lists`                 | warn when an import declaration does not explicitly list all thenames brought into scope             | dynamic                        | :ghc-flag:`-fnowarn-missing-import-lists`          |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-methods`                      | warn when class methods are undefined                                                                | dynamic                        | :ghc-flag:`-Wno-missing-methods`                   |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-signatures`                   | warn about top-level functions without signatures                                                    | dynamic                        | :ghc-flag:`-Wno-missing-signatures`                |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-exported-sigs`                | *(deprecated)* warn about top-level functions without signatures, only if they are exported.         | dynamic                        | :ghc-flag:`-Wno-missing-exported-sigs`             |
|                                                    | takes precedence over -Wmissing-signatures                                                           |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-exported-signatures`          | warn about top-level functions without signatures, only if they are exported. takes precedence       | dynamic                        | :ghc-flag:`-Wno-missing-exported-signatures`       |
|                                                    | over -Wmissing-signatures                                                                            |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-local-sigs`                   | *(deprecated)* warn about polymorphic local bindings without signatures                              | dynamic                        | :ghc-flag:`-Wno-missing-local-sigs`                |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-local-signatures`             | warn about polymorphic local bindings without signatures                                             | dynamic                        | :ghc-flag:`-Wno-missing-local-signatures`          |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissing-monadfail-instances`          | warn when a failable pattern is used in a do-block that does not have a ``MonadFail`` instance.      | dynamic                        | :ghc-flag:`-Wno-missing-monadfail-instances`       |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wsemigroup`                            | warn when a ``Monoid`` is not ``Semigroup``, and on non-``Semigroup`` definitions of ``(<>)``?       | dynamic                        | :ghc-flag:`-Wno-semigroup`                         |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmissed-specialisations`               | warn when specialisation of an imported, overloaded function fails.                                  | dynamic                        | :ghc-flag:`-Wno-missed-specialisations`            |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wall-missed-specialisations`           | warn when specialisation of any overloaded function fails.                                           | dynamic                        | :ghc-flag:`-Wno-all-missed-specialisations`        |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wmonomorphism-restriction`             | warn when the Monomorphism Restriction is applied                                                    | dynamic                        | :ghc-flag:`-Wno-monomorphism-restriction`          |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wname-shadowing`                       | warn when names are shadowed                                                                         | dynamic                        | :ghc-flag:`-Wno-name-shadowing`                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wnoncanonical-monad-instances`         | warn when ``Applicative`` or ``Monad`` instances have noncanonical definitions of ``return``,        | dynamic                        | :ghc-flag:`-Wno-noncanonical-monad-instances`      |
|                                                    | ``pure``, ``(>>)``, or ``(*>)``. See flag description in :ref:`options-sanity` for more              |                                |                                                    |
|                                                    | details.                                                                                             |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wnoncanonical-monadfail-instances`     | warn when ``Monad`` or ``MonadFail`` instances have noncanonical definitions of ``fail``.See         | dynamic                        | :ghc-flag:`-Wno-noncanonical-monadfail-instanc     |
|                                                    | flag description in :ref:`options-sanity` for more details.                                          |                                | es`                                                |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wnoncanonical-monoid-instances`        | warn when ``Semigroup`` or ``Monoid`` instances have noncanonical definitions of ``(<>)`` or         | dynamic                        | :ghc-flag:`-Wno-noncanonical-monoid-instances`     |
|                                                    | ``mappend``. See flag description in :ref:`options-sanity` for more details.                         |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Worphans`                              | warn when the module contains :ref:`orphan instance declarations or rewrite rules                    | dynamic                        | :ghc-flag:`-Wno-orphans`                           |
|                                                    | <orphan-modules>`                                                                                    |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Woverlapping-patterns`                 | warn about overlapping patterns                                                                      | dynamic                        | :ghc-flag:`-Wno-overlapping-patterns`              |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wtabs`                                 | warn if there are tabs in the source file                                                            | dynamic                        | :ghc-flag:`-Wno-tabs`                              |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wtype-defaults`                        | warn when defaulting happens                                                                         | dynamic                        | :ghc-flag:`-Wno-type-defaults`                     |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunrecognised-pragmas`                 | warn about uses of pragmas that GHC doesn't recognise                                                | dynamic                        | :ghc-flag:`-Wno-unrecognised-pragmas`              |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunticked-promoted-constructors`       | warn if promoted constructors are not ticked                                                         | dynamic                        | :ghc-flag:`-Wno-unticked-promoted-constructors     |
|                                                    |                                                                                                      |                                | `                                                  |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-binds`                         | warn about bindings that are unused. Alias for :ghc-flag:`-Wunused-top-binds`,                       | dynamic                        | :ghc-flag:`-Wno-unused-binds`                      |
|                                                    | :ghc-flag:`-Wunused-local-binds` and :ghc-flag:`-Wunused-pattern-binds`                              |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-top-binds`                     | warn about top-level bindings that are unused                                                        | dynamic                        | :ghc-flag:`-Wno-unused-top-binds`                  |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-local-binds`                   | warn about local bindings that are unused                                                            | dynamic                        | :ghc-flag:`-Wno-unused-local-binds`                |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-pattern-binds`                 | warn about pattern match bindings that are unused                                                    | dynamic                        | :ghc-flag:`-Wno-unused-pattern-binds`              |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-imports`                       | warn about unnecessary imports                                                                       | dynamic                        | :ghc-flag:`-Wno-unused-imports`                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-matches`                       | warn about variables in patterns that aren't used                                                    | dynamic                        | :ghc-flag:`-Wno-unused-matches`                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-foralls`                       | warn about type variables in user-written ``forall``\s that are unused                               | dynamic                        | :ghc-flag:`-Wno-unused-foralls`                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-type-variables`                | warn about variables in type family or data family instances that are unused                         | dynamic                        | :ghc-flag:`-Wno-unused-type-variables`             |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunused-do-bind`                       | warn about do bindings that appear to throw away values of types other than ``()``                   | dynamic                        | :ghc-flag:`-Wno-unused-do-bind`                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wwrong-do-bind`                        | warn about do bindings that appear to throw away monadic values that you should have bound           | dynamic                        | :ghc-flag:`-Wno-wrong-do-bind`                     |
|                                                    | instead                                                                                              |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wunsafe`                               | warn if the module being compiled is regarded to be unsafe. Should be used to check the safety       | dynamic                        | :ghc-flag:`-Wno-unsafe`                            |
|                                                    | status of modules when using safe inference. Works on all module types, even those using             |                                |                                                    |
|                                                    | explicit :ref:`Safe Haskell <safe-haskell>` modes (such as :ghc-flag:`-XTrustworthy`) and so         |                                |                                                    |
|                                                    | can be used to have the compiler check any assumptions made.                                         |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wsafe`                                 | warn if the module being compiled is regarded to be safe. Should be used to check the safety         | dynamic                        | :ghc-flag:`-Wno-safe`                              |
|                                                    | status of modules when using safe inference. Works on all module types, even those using             |                                |                                                    |
|                                                    | explicit :ref:`Safe Haskell <safe-haskell>` modes (such as :ghc-flag:`-XTrustworthy`) and so         |                                |                                                    |
|                                                    | can be used to have the compiler check any assumptions made.                                         |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wtrustworthy-safe`                     | warn if the module being compiled is marked as :ghc-flag:`-XTrustworthy` but it could instead        | dynamic                        | :ghc-flag:`-Wno-safe`                              |
|                                                    | be marked as :ghc-flag:`-XSafe`, a more informative bound. Can be used to detectonce a Safe          |                                |                                                    |
|                                                    | Haskell bound can be improved as dependencies are updated.                                           |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wwarnings-deprecations`                | warn about uses of functions & types that have warnings or deprecated pragmas                        | dynamic                        | :ghc-flag:`-Wno-warnings-deprecations`             |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wamp`                                  | *(deprecated)* warn on definitions conflicting with the Applicative-Monad Proposal (AMP)             | dynamic                        | :ghc-flag:`-Wno-amp`                               |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wredundant-constraints`                | Have the compiler warn about redundant constraints in typesignatures.                                | dynamic                        | :ghc-flag:`-Wno-redundant-constraints`             |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wdeferred-type-errors`                 | Report warnings when :ref:`deferred type errors <defer-type-errors>` are enabled. This option        | dynamic                        | :ghc-flag:`-Wno-deferred-type-errors`              |
|                                                    | is enabled by default. See :ghc-flag:`-fdefer-type-errors`.                                          |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wtyped-holes`                          | Report warnings when :ref:`typed hole <typed-holes>` errors are :ref:`deferred until runtime         | dynamic                        | :ghc-flag:`-Wno-typed-holes`                       |
|                                                    | <defer-type-errors>`. See :ghc-flag:`-fdefer-typed-holes`.                                           |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wdeferred-out-of-scope-variables`      | Report warnings when variable out-of-scope errors are :ref:`deferred until runtime                   | dynamic                        | :ghc-flag:`-Wno-deferred-out-of-scope-variable     |
|                                                    | <defer-out-of-scope-variables>`. See :ghc-flag:`-fdefer-out-of-scope-variables`.                     |                                | s`                                                 |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wpartial-type-signatures`              | warn about holes in partial type signatures when :ghc-flag:`-XPartialTypeSignatures` is              | dynamic                        | :ghc-flag:`-Wno-partial-type-signatures`           |
|                                                    | enabled. Not applicable when :ghc-flag:`-XPartialTypesignatures` is not enabled, in which case       |                                |                                                    |
|                                                    | errors are generated for such holes. See :ref:`partial-type-signatures`.                             |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+
| :ghc-flag:`-Wderiving-typeable`                    | warn when encountering a request to derive an instance of class ``Typeable``. As of GHC 7.10,        | dynamic                        | :ghc-flag:`-Wno-deriving-typeable`                 |
|                                                    | such declarations are unnecessary and are ignored by the compiler because GHC has a custom           |                                |                                                    |
|                                                    | solver for discharging this type of constraint.                                                      |                                |                                                    |
+----------------------------------------------------+------------------------------------------------------------------------------------------------------+--------------------------------+----------------------------------------------------+

